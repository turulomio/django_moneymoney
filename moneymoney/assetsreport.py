from datetime import date, datetime
from django.conf import settings
from django.urls import reverse
from django.utils.translation import gettext as _
from json import loads
from moneymoney import __version__
from moneymoney import models, ios
from moneymoney.reusing.request_casting import object_from_url
from moneymoney.reusing.casts import f
from moneymoney.reusing.currency import  Currency
from moneymoney.reusing.datetime_functions import dtaware2string, string2dtaware, dtnaive2string
from moneymoney.reusing.percentage import  Percentage
from os import path
from pydicts import lod
from unogenerator import ODT
from unogenerator.commons import bytes_after_trim_image


    

def generate_assets_report(request, format):
    from moneymoney.views import ReportAnnual
    authorization=request.user.auth_token.key
    c=request.user.profile.currency
    year=date.today().year
    template=f"{path.dirname(__file__)}/templates/AssetsReport.odt"
    doc=ODT(template)

    doc.setMetadata( 
        _("Assets report"),  
        _("This is an automatic generated report from Money Money"), 
        "Turulomio", 
        "MoneyMoney-{}".format(__version__)
    )
    
    
    doc.find_and_replace("__TITLE__", _("Assets Report"))
    doc.find_and_replace("__SUBTITLE__", _("Generated by MoneyMoney-{}").format(__version__))
    doc.find_and_replace("__DATETIME__", str(doc.statistics.init))

    doc.find_and_delete_until_the_end_of_document('Styles to remove')
    
    dict_report_annual=loads(ReportAnnual(request._request, year ).content)
    vTotalLastYear=Currency(dict_report_annual["last_year_balance"], c)
    vTotal=Currency(dict_report_annual["data"][11]["total"], c)
    
    from moneymoney.views import ReportAnnualGainsByProductstypes
    dict_report_annual_gainsbyproductstypes=loads(ReportAnnualGainsByProductstypes(request._request, year).content)
    vTotal_gains_net=Currency(lod.lod_sum(dict_report_annual_gainsbyproductstypes, "gains_net"), c)
    vTotal_dividends_net=Currency(lod.lod_sum(dict_report_annual_gainsbyproductstypes, "dividends_net"), c)
    vTotal_gains_gross=Currency(lod.lod_sum(dict_report_annual_gainsbyproductstypes, "gains_gross"), c)
    vTotal_dividends_gross=Currency(lod.lod_sum(dict_report_annual_gainsbyproductstypes, "dividends_gross"), c)
    vTotal_gains_dividends_net=vTotal_gains_net+vTotal_dividends_net
    vTotal_gains_dividends_gross=vTotal_gains_gross+vTotal_dividends_gross

    
    #Personal settings
    
    doc.addParagraph(_("Personal settings"), "Heading 1")
    doc.addParagraph(_("Your user currency is set to {0}.").format(c),  "MyStandard")
    doc.addParagraph(_("Your local time zone is set to {0}.").format(request.user.profile.zone),  "MyStandard")
    doc.pageBreak()
    
    # Assets
    doc.addParagraph(_("Assets"), "Heading 1")
    doc.addParagraph(_("Total assets of the user are {0}.").format(vTotal),  "MyStandard")
    if vTotalLastYear.amount>=0:
        moreorless=_("more")
        if (vTotal-vTotalLastYear).amount<0:
            moreorless=_("less")
        doc.addParagraph(f(_("At last year end you had {vTotalLastYear}, so it's a {Percentage(vTotal-vTotalLastYear, vTotalLastYear)} {moreorless} of the total assets at the end of the last year.")), "MyStandard")
    
    
    
        # Assets by bank
        doc.addParagraph(_("Assets by bank"), "Heading 2")
        
        dict_bankswithbalance=models.request_get(request._request.build_absolute_uri(reverse('banks-withbalance')), authorization)
        bankswithbalance=[(_("Bank"), _("Accounts balance"), _("Investments balance"), _("Total balance"))]
        for o in dict_bankswithbalance:
            if o["active"]==True:
                bankswithbalance.append((o["name"], Currency(o["balance_accounts"], c), Currency(o["balance_investments"], c), Currency(o["balance_total"], c)))
        bankswithbalance.append([_("Total"), Currency(lod.lod_sum(dict_bankswithbalance, "balance_accounts"), c), Currency(lod.lod_sum(dict_bankswithbalance, "balance_investments"), c), Currency(lod.lod_sum(dict_bankswithbalance, "balance_total"), c)])
        doc.addTableParagraph(bankswithbalance, columnssize_percentages=[40, 20, 20, 20],  size=8, style="Table1Total")

        # Assests current year
        doc.addParagraph(_("Assets current year evolution"), "Heading 2")
        
        report_annual=[(_("Month"), _("Accounts balance"), _("Investments balance"), _("Total"),  _("Annual percentage"), _("Month diff"))]
        for o in dict_report_annual["data"]:
            report_annual.append([o["month"], Currency(o["account_balance"], c), Currency(o["investment_balance"], c), Currency(o["total"], c), Percentage(o["percentage_year"], 1), Currency(o["diff_lastmonth"], c)])
        report_annual.append([_("Total"), "", "", "", "", Currency(lod.lod_sum(dict_report_annual["data"], "diff_lastmonth"), c)])

        doc.addTableParagraph(report_annual, columnssize_percentages=[10, 18, 18, 18, 18, 18 ],  size=7, name="TableReportAnnual", style="Table1Total")

        # Assests current year incomes
        from moneymoney.views import ReportAnnualIncome
        doc.addParagraph(_("Assets current year detail"), "Heading 2")
        dict_report_annual_income=loads(ReportAnnualIncome(request._request, year).content)
        report_annual_income=[(_("Month"), _("Incomes"), _("Expenses"), _("Gains"), _("Dividends"), _("Total"))]
        for o in dict_report_annual_income:
            report_annual_income.append((o["month"], Currency(o["incomes"], c), Currency(o["expenses"], c), Currency(o["gains"], c), Currency(o["dividends"], c), Currency(o["total"], c)))
        report_annual_income.append([
            _("Total"), 
            Currency(lod.lod_sum(dict_report_annual_income, "incomes"), c), 
            Currency(lod.lod_sum(dict_report_annual_income, "expenses"), c), 
            Currency(lod.lod_sum(dict_report_annual_income, "gains"), c), 
            Currency(lod.lod_sum(dict_report_annual_income, "dividends"), c), 
            Currency(lod.lod_sum(dict_report_annual_income, "total"), c), 
        ])

        doc.addTableParagraph(report_annual_income, columnssize_percentages=[40, 20, 20, 20],  size=8, style="Table1Total")
                
        ## Target
        doc.addParagraph(
            f(_("Up to date you have got {vTotal_gains_dividends_net} (net gains + net dividends) what represents a {Percentage(vTotal_gains_dividends_net, vTotalLastYear)} of the total assets at the end of the last year.")), 
            "MyStandard"
        )
        
        
        doc.pageBreak("Landscape")
        
        ### Assets evolution graphic
        doc.addParagraph(_("Assets graphical evolution"), "Heading 2")
        
        doc.addImageParagraph([bytes_after_trim_image(f"{settings.TMPDIR}/assetsreport_evolution.png", "png"), ], 26, 14, "Illustration")
        doc.pageBreak()
        
        
        ### Current year investment gains by product type
        doc.addParagraph(_("Current year investment gains group by product type"), "Heading 2")
        report_annual_gainsbyproductstypes=[(_("Name"), _("Gross gains"), _("Gross dividends"), _("Net gains"), _("Net dividends"))]
        for o in dict_report_annual_gainsbyproductstypes:
            report_annual_gainsbyproductstypes.append((
                o["name"], 
                Currency(o["gains_gross"], c), 
                Currency(o["dividends_gross"], c), 
                Currency(o["gains_net"], c), 
                Currency(o["dividends_net"], c), 
            ))
        report_annual_gainsbyproductstypes.append([
            _("Total"), 
            Currency(lod.lod_sum(dict_report_annual_gainsbyproductstypes, "gains_gross"), c), 
            Currency(lod.lod_sum(dict_report_annual_gainsbyproductstypes, "dividends_gross"), c), 
            Currency(lod.lod_sum(dict_report_annual_gainsbyproductstypes, "gains_net"), c), 
            Currency(lod.lod_sum(dict_report_annual_gainsbyproductstypes, "dividends_net"), c), 
        ])
        doc.addTableParagraph(report_annual_gainsbyproductstypes,  size=8, style="Table1Total")
        
        doc.addParagraph(f(_("Gross gains + Gross dividends = {vTotal_gains_dividends_gross}.")),  "MyStandard")
        doc.addParagraph(f(_("Net gains + Net dividends = {vTotal_gains_dividends_net}.")),  "MyStandard")
        doc.pageBreak()

    ## Accounts
    doc.addParagraph(_("Current Accounts"), "Heading 1")
    dict_accountswithbalance=models.request_get(request._request.build_absolute_uri(reverse('accounts-withbalance')), authorization)

    accountswithbalance=[(_("Name"), _("Number"), _("Balance account"), _("Balance user currency"))]
    for o in dict_accountswithbalance:
        if o["active"] is True:
            accountswithbalance.append((
                o["name"], 
                o["number"], 
                Currency(o["balance_account"], o["currency"]), 
                Currency(o["balance_user"], c), 
            ))
    accountswithbalance.append([
        _("Total"), 
        "", 
        "", 
        Currency(lod.lod_sum(dict_accountswithbalance, "balance_user"), c), 
    ])
    doc.addTableParagraph(accountswithbalance, columnssize_percentages=[37, 33, 15, 15],  size=8, style="Table1Total")
    doc.pageBreak("Landscape")
        
    ## Investments
    doc.addParagraph(_("Current investments"), "Heading 1")
    
    doc.addParagraph(_("Investments list"), "Heading 2")
    doc.addParagraph(_("Next list is sorted by the distance in percent to the selling point."), "MyStandard")
    dict_investmentswithbalance=models.request_get(request._request.build_absolute_uri(reverse('investments-withbalance'))+"?active=true", authorization)
    dict_investmentswithbalance=lod.lod_order_by(dict_investmentswithbalance, "percentage_selling_point")
    investmentswithbalance=[(_("Name"), _("Invested"),  _("Balance"), _("Gains"), _("&percnt; invested"), _("&percnt; selling point"))]
    for o in dict_investmentswithbalance:
        investmentswithbalance.append((
            o["fullname"], 
            Currency(o["invested_user"], o['currency']), 
            Currency(o["balance_user"], o['currency']), 
            Currency(o["gains_user"], o['currency']), 
            Percentage(o["percentage_invested"], 1), 
            Percentage(o["percentage_selling_point"], 1), 
        ))  
        invested_user=Currency(lod.lod_sum(dict_investmentswithbalance, "invested_user"), c)
        gains_positives=Currency(lod.lod_sum_positives(dict_investmentswithbalance, "gains_user"), c)
        gains_negatives=Currency(lod.lod_sum_negatives(dict_investmentswithbalance, "gains_user"), c)
        gains=gains_positives+gains_negatives
    investmentswithbalance.append([
        _("Total"), 
        invested_user, 
        Currency(lod.lod_sum(dict_investmentswithbalance, "balance_user"), c), 
        gains, 
        Percentage(gains.amount, invested_user.amount), 
        "", 
    ])
    doc.addTableParagraph(investmentswithbalance, columnssize_percentages=[50, 10, 10, 10, 10, 10],  size=8, style="Table1Total")
    invested_user=Currency(lod.lod_sum(dict_investmentswithbalance, "invested_user"), c)
    gains_positives=Currency(lod.lod_sum_positives(dict_investmentswithbalance, "gains_user"), c)
    gains_negatives=Currency(lod.lod_sum_negatives(dict_investmentswithbalance, "gains_user"), c)
    gains=gains_positives+gains_negatives
    if invested_user.isZero()==False:
        doc.addParagraph(f(_("Investment gains (positive minus negative results): {gains_positives} - {-gains_negatives} are {gains}.")), "MyStandard")

    ## Current Investment Operations list
    doc.addParagraph(_("Current investment operations"),"Heading 2")
    from moneymoney.views import ReportCurrentInvestmentsOperations
    dict_report_current_investmentsoperations=loads(ReportCurrentInvestmentsOperations(request._request).content)
    report_current_investmentsoperations=[(_("Date and time"), _("Name"), _("Operation type"), _("Shares"), _("Price"), _("Invested"), _("Balance"), _("Gross gains"), _("% total"))]
    for o in dict_report_current_investmentsoperations:
        report_current_investmentsoperations.append((
           dtaware2string(string2dtaware(o["datetime"], "JsUtcIso"), "%Y-%m-%d %H:%M:%S"), 
            o["name"],
            object_from_url(request.build_absolute_uri(reverse('operationstypes-detail', args=(o["operationstypes_id"], ))), models.Operationstypes).name, 

            o['shares'], 
            Currency(o["price_user"], c), 
            Currency(o["invested_user"], c), 
            Currency(o["balance_user"], c), 
            Currency(o["gains_gross_user"], c), 
            Percentage(o["gains_gross_user"], o["invested_user"])
        ))
            #Percentage(o["percentage_total_user"], 1)))
    report_current_investmentsoperations.append([
        _("Total"), 
        "", 
        "", 
        "", 
        "", 
        Currency(lod.lod_sum(dict_report_current_investmentsoperations, "invested_user"), c), 
        Currency(lod.lod_sum(dict_report_current_investmentsoperations, "balance_user"), c), 
        Currency(lod.lod_sum(dict_report_current_investmentsoperations, "gains_gross_user"), c), 
        "", 
    ])

    doc.addTableParagraph(report_current_investmentsoperations, columnssize_percentages=[10, 32, 10, 8, 8, 8, 8, 8, 8,],  size=6, style="Table1Total")
                

   
    doc.pageBreak("Landscape")
    ### Graphics wdgInvestments clases        
    doc.addParagraph(_("Investments group by variable percentage"), "Heading 2")
  
    width=None
    height=12
    doc.addImageParagraph([bytes_after_trim_image(f"{settings.TMPDIR}/assetsreport_classes_by_percentage.png", "png")], width, height, "Illustration")

    doc.addParagraph(_("Investments group by investment type"), "Heading 2")
    doc.addImageParagraph([bytes_after_trim_image(f"{settings.TMPDIR}/assetsreport_classes_by_producttype.png", "png"), ], width, height, "Illustration")

    doc.addParagraph(_("Investments group by leverage"), "Heading 2")        
    doc.addImageParagraph([bytes_after_trim_image(f"{settings.TMPDIR}/assetsreport_classes_by_leverage.png", "png"), ], width, height, "Illustration")

    doc.addParagraph(_("Investments group by investment product"), "Heading 2")
    doc.addImageParagraph([bytes_after_trim_image(f"{settings.TMPDIR}/assetsreport_classes_by_product.png", "png"), ], width, height, "Illustration")

    doc.addParagraph(_("Investments group by Call/Put/Inline"), "Heading 2")
    doc.addImageParagraph([bytes_after_trim_image(f"{settings.TMPDIR}/assetsreport_classes_by_pci.png", "png"),  ], width, height, "Illustration")
    
    doc.pageBreak("Landscape")
    
    #Orders report
    doc.addParagraph(_("Investments orders"), "Heading 1")
    dict_orders_list=models.request_get(request._request.build_absolute_uri(reverse('orders-list'))+"?active=true", authorization)
    dict_orders_list=lod.lod_order_by(dict_orders_list, "percentage_from_price", reverse=True)
    orders_list=[( _("Date"), _("Expiration"), _("Investment"), _("Shares"), _("Price"), _("Amount"), _("% from current price"))]
    for o in dict_orders_list:
        orders_list.append((
            o["date"], 
            o["expiration"], 
            o["investmentsname"], 
            o["shares"], 
            Currency(o["price"], o["currency"]), 
            Currency(o["amount"], o["currency"]), 
            Percentage(o["percentage_from_price"], 1)
        ))

    doc.addTableParagraph(orders_list, columnssize_percentages=[8, 8, 44, 10, 10, 10, 10 ],  size=8, style="Table0")
    doc.pageBreak("Landscape")
    
    #Dividend report
    doc.addParagraph(_("Dividend estimations report"), "Heading 1")
    from moneymoney.views import ReportDividends
    dict_reportdividends=loads(ReportDividends(request._request).content)
    reportdividends=[( _("Name"), _("Current price"), _("DPS"), _("Shares"), _("Estimated"), _("% Annual"))]
    for o in dict_reportdividends:
        reportdividends.append((
            o["name"], 
            Currency(o["current_price"], o["currency"]), 
            Currency(o["dps"], o["currency"]), 
            o["shares"], 
            Currency(o["estimated"], o["currency"]), 
            Percentage(o["percentage"], 1)
        ))

    reportdividends.append([
        _("Total"), 
        "", 
        "", 
        "", 
        Currency(lod.lod_sum(dict_reportdividends, "estimated"), c), 
        "", 
    ])
    doc.addTableParagraph(reportdividends, columnssize_percentages=[50, 10, 10, 10, 10, 10 ],  size=8, style="Table1Total")
    doc.addParagraph(_("If I keep this investment during a year, I'll get {0}").format(Currency(lod.lod_sum(dict_reportdividends,'estimated'),c)), "MyStandard")
    doc.pageBreak()
    
    # Ranking de investments
    doc.addParagraph(_("Historical investments ranking"), "Heading 1")    
    from moneymoney.views import ReportRanking
    dict_reportranking=loads(ReportRanking(request._request).content)
    ios_ranking=ios.IOS(dict_reportranking)
    reportranking=[(_("Ranking"), _("Name"), _("Current net gains"), _("Historical net gains"), _("Dividend"), _("Total"))]
    for products_id in ios_ranking.entries():
        reportranking.append((
            ios_ranking.d_data(products_id)["ranking"], 
            ios_ranking.d_data(products_id)["name"], 
            Currency(ios_ranking.d_total_io_current(products_id)["gains_net_user"], c), 
            Currency(ios_ranking.d_total_io_historical(products_id)["gains_net_user"], c), 
            Currency(ios_ranking.d_data(products_id)["dividends"], c), 
            Currency(ios_ranking.d_data(products_id)["total"], c), 
        ))

    reportranking.append([
        _("Total"), 
        "", 
        Currency(lod.lod_sum(dict_reportranking, "current_net_gains"), c), 
        Currency(lod.lod_sum(dict_reportranking, "historical_net_gains"), c), 
        Currency(lod.lod_sum(dict_reportranking, "dividends"), c), 
        Currency(lod.lod_sum(dict_reportranking, "total"), c), 
    ])
    doc.addTableParagraph(reportranking, columnssize_percentages=[7, 43, 12.5, 12.5, 12.5, 12.5 ],  size=5, style="Table1Total")
    
    
    
    # About
    doc.addParagraph(_("About Money Money"), "Heading 1")
    doc.addParagraph(_("Money Money is a opensource software to manage your personal finances."))
    doc.pageBreak()
    
    
    # Document Generation
    filename='/tmp/AssetsReport-{}.pdf'.format(dtnaive2string(datetime.now(), "%Y%m%d%H%M"))
    if format=="pdf":
        doc.export_pdf(filename)
    elif format=="odt":
        filename=filename[:-4]+".odt"
        doc.save(filename)
    elif format=="docx":
        filename=filename[:-4]+".docx"
        doc.export_docx(filename)
    doc.close()
    return filename


    #Variable used but not detected due to f(
    moreorless, vTotal_gains_dividends_net, vTotal_gains_dividends_gross
