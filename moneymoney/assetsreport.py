from datetime import date
from requests import get
from django.urls import reverse
from django.utils.translation import ugettext as _
from json import loads
from moneymoney import __version__
from moneymoney.reusing.connection_dj import cursor_one_field
from moneymoney.reusing.currency import  Currency
from moneymoney.reusing.decorators import timeit
#from moneymoney.reusing.datetime_functions import days2string
from moneymoney.reusing.listdict_functions import listdict_sum, listdict_sum_negatives, listdict_sum_positives
from moneymoney.reusing.percentage import  Percentage
from unogenerator import ODT

def request_get(absolute_url, authorization):
    a=get(absolute_url, headers={'Authorization': f'Token {authorization}'})
    return loads(a.content)

@timeit
def assetsreport(request):
    authorization=cursor_one_field("select * from authtoken_token where user_id=%s", (request.user.id, ))
    c=request.local_currency
    z=request.local_zone
    year=date.today().year
    
    doc=ODT('./moneymoney/templates/AssetsReport.odt')
    doc.setMetadata( 
        _("Assets report"),  
        _("This is an automatic generated report from Money Money"), 
        "Turulomio", 
        "MoneyMoney-{}".format(__version__)
    )
    doc.find_and_replace("__TITLE__", _("Assets Report"))
    doc.find_and_replace("__SUBTITLE__", _("Generated by MoneyMoney-{}".format(__version__)))
    doc.find_and_replace("__DATETIME__", str(doc.init))
    doc.paragraphBreak()
    doc.pageBreak()
    
    from moneymoney.views import ReportAnnual
    dict_report_annual=loads(ReportAnnual(request._request, year ).content)
    vTotalLastYear=Currency(dict_report_annual["last_year_balance"], c)
    vTotal=Currency(dict_report_annual["data"][11]["total"], c)
    
    from moneymoney.views import ReportAnnualGainsByProductstypes
    dict_report_annual_gainsbyproductstypes=loads(ReportAnnualGainsByProductstypes(request._request, year).content)
    vTotal_gains_net=Currency(listdict_sum(dict_report_annual_gainsbyproductstypes, "gains_net"), c)
    vTotal_dividends_net=Currency(listdict_sum(dict_report_annual_gainsbyproductstypes, "dividends_net"), c)
    vTotal_gains_gross=Currency(listdict_sum(dict_report_annual_gainsbyproductstypes, "gains_gross"), c)
    vTotal_dividends_gross=Currency(listdict_sum(dict_report_annual_gainsbyproductstypes, "dividends_gross"), c)
    vTotal_gains_dividends_net=vTotal_gains_net+vTotal_dividends_net
    vTotal_gains_dividends_gross=vTotal_gains_gross+vTotal_dividends_gross
    vTarget_percentage=Percentage(4, 100)#Set in database
    vTarget_amount=Currency(vTotalLastYear.amount*vTarget_percentage.value, c)

    # About
    doc.addParagraph(_("About Xulpymoney"), "Heading 1")
    doc.pageBreak()
    
    # Assets
    doc.addParagraph(_("Assets"), "Heading 1")
    doc.addParagraph(_(f"Your user currency is set to {c}."),  "Standard")
    doc.addParagraph(_(f"Your local time zone is set to {z}."),  "Standard")
    doc.addParagraph(_(f"Total assets of the user are {vTotal}."),  "Standard")
    if vTotalLastYear.amount>=0:
        moreorless=_("more")
        if (vTotal-vTotalLastYear).amount<0:
            moreorless=_("less")
        doc.addParagraph(_(f"At last year end you had {vTotalLastYear}, so it's a {Percentage(vTotal-vTotalLastYear, vTotalLastYear)} {moreorless} of the total assets at the end of the last year."), "Standard")
    
    
    
        # Assets by bank
        doc.addParagraph(_("Assets by bank"), "Heading 2")
        
        from moneymoney.views import BanksWithBalance
        dict_bankswithbalance=loads(BanksWithBalance(request._request).content)
        bankswithbalance=[(_("Bank"), _("Accounts balance"), _("Investments balance"), _("Total balance"))]
        for o in dict_bankswithbalance:
            if o["active"]==True:
                bankswithbalance.append((o["name"], Currency(o["balance_accounts"], c), Currency(o["balance_investments"], c), Currency(o["balance_total"], c)))

        doc.addTableParagraph(bankswithbalance, columnssize_percentages=[40, 20, 20, ],  size=8, style="3D")
        doc.addParagraph(_(f"Sum of all bank balances is {Currency(listdict_sum(dict_bankswithbalance, 'balance_total'), c)}"), "Standard")

        # Assests current year
        doc.addParagraph(_("Assets current year evolution"), "Heading 2")
        
        report_annual=[(_("Month"), _("Accounts balance"), _("Investments balance"), _("Total"),  _("Annual percentage"), _("Month diff"))]
        for o in dict_report_annual["data"]:
            report_annual.append([o["month"], Currency(o["account_balance"], c), Currency(o["investment_balance"], c), Currency(o["total"], c), Percentage(o["percentage_year"], 1), Currency(o["diff_lastmonth"], c)])

        doc.addTableParagraph(report_annual, columnssize_percentages=[40, 20, 20, ],  size=7, style="3D")

                
        ## Target
        target=Percentage(4,100)#AnnualTarget(doc.mem).init__from_db(date.today().year)
        doc.addParagraph(
                _(f"The investment system has established a {target} year target.")+" " +
                _(f"With this target you should gain {vTarget_amount} at the end of the year.") +" " +
                _(f"Up to date you have got {vTotal_gains_dividends_net} (net gains + net dividends) what represents a {Percentage(vTotal_gains_dividends_net, vTarget_amount)} of the target."), 
                "Standard"
        )
        doc.pageBreak("Landscape")
        
        ### Assets evolution graphic
        doc.addParagraph(_("Assets graphical evolution"), "Heading 2")
        doc.pageBreak()
        
        
        ### Current year investment gains by product type
        doc.addParagraph(_("Current year investment gains group by product type"), "Heading 2")
        report_annual_gainsbyproductstypes=[(_("Name"), _("Gross gains"), _("Gross dividends"), _("Net gains"), _("Net divid"))]
        for o in dict_report_annual_gainsbyproductstypes:
            report_annual_gainsbyproductstypes.append((
                o["name"], 
                Currency(o["gains_gross"], c), 
                Currency(o["dividends_gross"], c), 
                Currency(o["gains_net"], c), 
                Currency(o["dividends_net"], c), 
            ))

        doc.addTableParagraph(report_annual_gainsbyproductstypes, columnssize_percentages=[40, 20, 20, ],  size=8, style="3D")
        
        doc.addParagraph(_(f"Gross gains + Gross dividends = {vTotal_gains_dividends_gross}."),  "Standard")
        doc.addParagraph(_(f"Net gains + Net dividends = {vTotal_gains_dividends_net}."),  "Standard")
        doc.pageBreak()

    ## Accounts
    doc.addParagraph(_("Current Accounts"), "Heading 1")
    from moneymoney.views import AccountsWithBalance
    dict_accountswithbalance=loads(AccountsWithBalance(request._request).content)
    accountswithbalance=[(_("Name"), _("Number"), _("Balance account"), _("Balance user currency"))]
    for o in dict_accountswithbalance:
        if o["active"] is True:
            accountswithbalance.append((
                o["name"], 
                o["number"], 
                Currency(o["balance_account"], c), 
                Currency(o["balance_user"], c), 
            ))
    vTotal_accounts_local=listdict_sum(dict_accountswithbalance, "balance_user")

    doc.addTableParagraph(accountswithbalance, columnssize_percentages=[40, 20, 20, ],  size=8, style="3D")
    doc.addParagraph(_(f"Sum of all account balances is {vTotal_accounts_local}"), "Standard")
    doc.pageBreak("Landscape")
        
    ## Investments
    doc.addParagraph(_("Current investments"), "Heading 1")
    
    doc.addParagraph(_("Investments list"), "Heading 2")
    doc.addParagraph(_("Next list is sorted by the distance in percent to the selling point."), "Standard")
    dict_investmentswithbalance=request_get(request._request.build_absolute_uri(reverse('InvestmentsWithBalance'))+"?active=true", authorization)
    investmentswithbalance=[(_("Name"), _("Balance"), _("Gains"), _("% invested"), _("% selling point"))]
    for o in dict_investmentswithbalance:
        investmentswithbalance.append((
            o["fullname"], 
            Currency(o["balance_user"], o['currency']), 
            Currency(o["gains_user"], o['currency']), 
            Percentage(o["percentage_invested"], 1), 
            Percentage(o["percentage_selling_point"], 1), 
        ))
    doc.addTableParagraph(investmentswithbalance, columnssize_percentages=[40, 20, 20, ],  size=8, style="3D")
    invested_user=Currency(listdict_sum(dict_investmentswithbalance, "invested_user"), c)
    gains_positives=Currency(listdict_sum_positives(dict_investmentswithbalance, "gains_user"), c)
    gains_negatives=Currency(listdict_sum_negatives(dict_investmentswithbalance, "gains_user"), c)
    gains=gains_positives+gains_negatives
    if invested_user.isZero()==False:
        doc.addParagraph(_(f"Sum of all invested assets is {invested_user}."), "Standard")
        doc.addParagraph(_(f"Investment gains (positive minus negative results): {gains_positives} - {-gains_negatives} are {gains}, what represents a {Percentage(gains, invested_user)} of total assets."), "Standard")
#        doc.addParagraph(_(" Assets average age: {}").format(  days2string(doc.mem.data.investments_active().average_age())), "Standard")
    else:
        doc.addParagraph(_("There aren't invested assets"), "Standard")

    ## Current Investment Operations list
    doc.addParagraph(_("Current investment operations"),"Heading 2")
#        doc.mem.frmMain.on_actionInvestmentsOperations_triggered()
#        model=doc.mem.frmMain.w.mqtwCurrent.officegeneratorModel(_("CurrentInvestmentOperations"))
#        model.removeColumns([8, 9, 11])        
#        model.odt_table(self, 26,  6)       
#        doc.pageBreak(True)
#        
    ### Graphics wdgInvestments clases
#        doc.mem.frmMain.on_actionInvestmentsClasses_triggered()
#        doc.mem.frmMain.w.open_all_tabs()#Load tabs to finish animations
#        doc.mem.frmMain.w.viewTPC.on_actionShowData_triggered()
#        doc.mem.frmMain.w.viewTipo.on_actionShowData_triggered()
#        doc.mem.frmMain.w.viewApalancado.on_actionShowData_triggered()
#        doc.mem.frmMain.w.viewProduct.on_actionShowData_triggered()
#        doc.mem.frmMain.w.viewCountry.on_actionShowData_triggered()
#        doc.mem.frmMain.w.viewPCI.on_actionShowData_triggered()
#        
    doc.addParagraph(_("Investments group by variable percentage"), "Heading 2")
#        savefile="{}/wdgInvestmentsClasses_canvasTPC_legend.png".format(doc.dir)
#        doc.mem.frmMain.w.tab.setCurrentIndex(0)
#        doc.sleep(2)
#        doc.mem.frmMain.w.viewTPC.pie.save(savefile)
#        doc.addImage(savefile, savefile)
#        doc.illustration([savefile, ], 25, 13, savefile)
#        doc.pageBreak(True)
#        
    doc.addParagraph(_("Investments group by investment type"), "Heading 2")
#        savefile="{}/wdgInvestmentsClasses_canvasTipo_legend.png".format(doc.dir)
#        doc.mem.frmMain.w.tab.setCurrentIndex(2)
#        doc.sleep(2)
#        doc.mem.frmMain.w.viewTipo.pie.save(savefile)
#        doc.addImage(savefile, savefile)
#        doc.illustration([savefile, ], 25, 13, savefile)
#        doc.pageBreak(True)
#        
    doc.addParagraph(_("Investments group by leverage"), "Heading 2")        
#        savefile="{}/wdgInvestmentsClasses_canvasApalancado_legend.png".format(doc.dir)
#        doc.mem.frmMain.w.tab.setCurrentIndex(3)
#        doc.sleep(2)
#        doc.mem.frmMain.w.viewApalancado.pie.save(savefile)
#        doc.addImage(savefile, savefile)
#        doc.illustration([savefile, ], 25, 13, savefile)
#        doc.pageBreak(True)
#        
    doc.addParagraph(_("Investments group by investment product"), "Heading 2")
#        savefile="{}/wdgInvestmentsClasses_canvasProduct_legend.png".format(doc.dir)
#        doc.mem.frmMain.w.tab.setCurrentIndex(5)
#        doc.sleep(2)
#        doc.mem.frmMain.w.viewProduct.pie.save(savefile)
#        doc.addImage(savefile, savefile)
#        doc.illustration([savefile, ], 25, 13, savefile)
#        doc.pageBreak(True)
#        
    doc.addParagraph(_("Investments group by country"), "Heading 2")
#        savefile="{}/wdgInvestmentsClasses_canvasCountry_legend.png".format(doc.dir)
#        doc.mem.frmMain.w.tab.setCurrentIndex(4)
#        doc.sleep(2)
#        doc.mem.frmMain.w.viewCountry.pie.save(savefile)
#        doc.addImage(savefile, savefile)
#        doc.illustration([savefile, ], 25, 13, savefile)
#        doc.pageBreak(True)
#        
    doc.addParagraph(_("Investments group by Call/Put/Inline"), "Heading 2")
#        savefile="{}/wdgInvestmentsClasses_canvasPCI_legend.png".format(doc.dir)
#        doc.mem.frmMain.w.tab.setCurrentIndex(1)
#        doc.sleep(2)
#        doc.mem.frmMain.w.viewPCI.pie.save(savefile)
#        doc.addImage(savefile, savefile)
#        doc.illustration([savefile, ], 25, 13, savefile)
#        
#        doc.mem.frmMain.showMaximized()
    doc.pageBreak("Landscape")
    
    #Orders report
    doc.addParagraph(_("Investments orders"), "Heading 1")
    dict_orders_list=request_get(request._request.build_absolute_uri(reverse('OrdersList'))+"?active=true", authorization)
    orders_list=[( _("Date"), _("Expiration"), _("Investment"), _("Shares"), _("Price"), _("Amount"), _("% from current price"))]
    for o in dict_orders_list:
        orders_list.append((
            o["date"], 
            o["expiration"], 
            o["investmentsname"], 
            o["shares"], 
            Currency(o["price"], o["currency"]), 
            Currency(o["amount"], o["currency"]), 
            Percentage(o["percentage_from_price"], 1)
        ))

    doc.addTableParagraph(orders_list, columnssize_percentages=[40, 20, 20, ],  size=8, style="3D")
    doc.pageBreak("Landscape")
    
    #Dividend report
    doc.addParagraph(_("Dividend estimations report"), "Heading 1")
    from moneymoney.views import ReportDividends
    dict_reportdividends=loads(ReportDividends(request._request).content)
    reportdividends=[( _("Name"), _("Current price"), _("DPS"), _("Shares"), _("Estimated"), _("% Annual"))]
    for o in dict_reportdividends:
        reportdividends.append((
            o["name"], 
            Currency(o["current_price"], o["currency"]), 
            Currency(o["dps"], o["currency"]), 
            o["shares"], 
            Currency(o["estimated"], o["currency"]), 
            Percentage(o["percentage"], 1)
        ))

    doc.addTableParagraph(reportdividends, columnssize_percentages=[40, 20, 20, ],  size=8, style="3D")
    doc.addParagraph(_(f"If I keep this investment during a year, I'll get {Currency(listdict_sum(dict_reportdividends,'estimated'),c)}"), "Standard")
    doc.pageBreak()
    
    # Ranking de investments
    doc.addParagraph(_("Historical investments ranking"), "Heading 1")    
    from moneymoney.views import ReportRanking
    dict_reportranking=loads(ReportRanking(request._request).content)
    reportranking=[(_("Ranking"), _("Name"), _("Current net gains"), _("Historical net gains"), _("Dividend"), _("Total"))]
    for o in dict_reportranking:
        reportranking.append((
            o["ranking"], 
            o["name"], 
            Currency(o["current_net_gains"], c), 
            Currency(o["historical_net_gains"], c), 
            Currency(o["dividends"], c), 
            Currency(o["total"], c), 
        ))

    doc.addTableParagraph(reportranking, columnssize_percentages=[40, 20, 20, ],  size=7, style="3D")

#    filenamee='AssetsReport-{}.pdf'.format(dtnaive2string(datetime.now(), "%Y%m%d%H%M")
    filename="AssetsReport.pdf"
    doc.export_pdf(filename)
    doc.close()
    return filename
