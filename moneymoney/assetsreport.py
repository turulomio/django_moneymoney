
from django.utils.translation import ugettext as _
from moneymoney import __version__
from unogenerator import ODT
#from unogenerator.reusing.datetime_functions import dtnaive2string
#from xulpymoney.objects.assets import  Assets
#from xulpymoney.objects.annualtarget import  AnnualTarget
from unogenerator.reusing.percentage import  Percentage


def assetsreport(request):
    doc=ODT('moneymoney/templates/AssetsReport.odt')
    doc.setMetadata( 
        _("Assets report"),  
        _("This is an automatic generated report from Money Money"), 
        "Turulomio", 
        "MoneyMoney-{}".format(__version__)
    )
    doc.find_and_replace_and_setcursorposition("__TITLE__", _("Assets Report"))
    doc.find_and_replace_and_setcursorposition("__SUBTITLE__", _("Generated by Xulpymoney-{}".format(__version__)))
    doc.find_and_replace_and_setcursorposition("__DATETIME__", str(doc.init))
    doc.pageBreak()
    vTotalLastYear=0#Assets(doc.mem).saldo_total(doc.mem.data.investments,  date(date.today().year-1, 12, 31))
    vTotal=0#Assets(doc.mem).saldo_total(doc.mem.data.investments,  date.today())
    

    # About
    doc.addParagraph(_("About Xulpymoney"), "Heading 1")
    
    # Assets
    doc.addParagraph(_("Assets"), "Heading 1")
    doc.addParagraph(_(f"Total assets of the user are {vTotal}."),  "Standard")
    if vTotalLastYear>=0:
        moreorless=_("more")
        if (vTotal-vTotalLastYear)<0:
            moreorless=_("less")
        doc.addParagraph(_("It's a {} {} of the total assets at the end of the last year.").format(Percentage(vTotal-vTotalLastYear, vTotalLastYear), moreorless), "Standard")
    
    
    
    
    
    
#    doc.export_pdf('AssetsReport-{}.pdf'.format(dtnaive2string(datetime.now(), "%Y%m%d%H%M")))
    doc.export_pdf("AssetsReport.pdf")
    doc.close()

#
#
#        
#    def variables(self):
#        doc.vTotalLastYear=Assets(doc.mem).saldo_total(doc.mem.data.investments,  date(date.today().year-1, 12, 31))
#        doc.vTotal=Assets(doc.mem).saldo_total(doc.mem.data.investments,  date.today())
#
#    def cover(self):
#
#        
#    def body(self):
#        # About
#        doc.header(_("About Xulpymoney"), 1)
#        
#        # Assets
#        doc.header(_("Assets"), 1)
#        doc.simpleParagraph(_("Total assets of the user are {}.").format(doc.vTotal))
#        if doc.vTotalLastYear.isZero()==False:
#            moreorless=_("more")
#            if (doc.vTotal-doc.vTotalLastYear).isLTZero():
#                moreorless=_("less")
#            doc.simpleParagraph(_("It's a {} {} of the total assets at the end of the last year.").format(Percentage(doc.vTotal-doc.vTotalLastYear, doc.vTotalLastYear), moreorless))
#        
#        # Assets by bank
#        doc.header(_("Assets by bank"), 2)
#        doc.mem.frmMain.on_actionBanks_triggered()
#        
#        model=doc.mem.frmMain.w.mqtwBanks.officegeneratorModel()
#        model.removeColumns([1,])
#        model.odt_table(self, 10,  8 )
#
#        doc.simpleParagraph(_("Sum of all bank balances is {}").format(doc.mem.frmMain.w.banks.balance()))
#        doc.pageBreak(True)
#
#        # Assests current year
#        doc.header(_("Assets current year evolution"), 2)
#        
#        #wdgTotal
#        doc.mem.frmMain.on_actionTotalReport_triggered()
#        model=doc.mem.frmMain.w.mqtw.officegeneratorModel("mqtwTotal")
#        model.odt_table(self, 26, 6)
#                
#        ## Target
#        target=AnnualTarget(doc.mem).init__from_db(date.today().year)
#        doc.simpleParagraph(_("The investment system has established a {} year target.").format(target.percentage)+" " +
#                _("With this target you will gain {} at the end of the year.").format(doc.mem.localmoney(target.annual_balance())) +" " +
#                _("Up to date you have got  {} (gains + dividends) what represents a {} of the target.").format(doc.mem.frmMain.w.tmm.dividends()+doc.mem.frmMain.w.tmm.gains(), Percentage(doc.mem.frmMain.w.tmm.gains()+doc.mem.frmMain.w.tmm.dividends(), target.annual_balance())))
#        doc.pageBreak(True)
#        
#        ### Assets evolution graphic
#        doc.header(_("Assets graphical evolution"), 2)
#        
#        doc.mem.frmMain.w.load_graphic(animations=False)
#        doc.mem.frmMain.w.tab.setCurrentIndex(1)
#        savefile="{}/wdgTotal.png".format(doc.dir)
#        doc.mem.frmMain.w.wdgTS.ts.save(savefile)
#        doc.addImage(savefile, savefile)
#        doc.illustration([savefile, ], 25, 13, savefile)
#        doc.pageBreak()
#        
#        
#        ### Current year investment gains by product type
#        doc.header(_("Current year investment gains group by product type"), 2)
#        doc.mem.frmMain.w.on_actionGainsByProductType_triggered()
#        model=doc.mem.frmMain.w.tab.currentWidget().children()[1].officegeneratorModel("mqtwTotal")#Widget generated dinamically. mqtw is childre[1]
#        model.odt_table(self, 18, 9)
#        doc.pageBreak()
#
#        ## Accounts
#        doc.header(_("Current Accounts"), 1)
#        data=[]
#        doc.mem.data.accounts_active().order_by_name()
#        for account in doc.mem.data.accounts_active().arr:
#            data.append((account.name, account.bank.name, account.balance()))
#        doc.table( [_("Account"), _("Bank"),  _("Balance")], data, [6, 6, 3], 9)       
#        
#        doc.simpleParagraph(_("Sum of all account balances is {}").format(doc.mem.data.accounts_active().balance()))
#
#        
#        doc.pageBreak(True)
#        
#        ## Investments
#        doc.header(_("Current investments"), 1)
#        
#        doc.header(_("Investments list"), 2)
#        doc.simpleParagraph(_("Next list is sorted by the distance in percent to the selling point."))
#        doc.mem.frmMain.on_actionInvestments_triggered()
#        
#        model=doc.mem.frmMain.w.mqtwInvestments.officegeneratorModel()
#        model.removeColumns([1, 2, 3, 4])
#        model.odt_table(self, 26,  8 )
#        
#        suminvertido=doc.mem.data.investments_active().invested()
#        sumpendiente=doc.mem.data.investments_active().pendiente()
#        if suminvertido.isZero()==False:
#            doc.simpleParagraph(_("Sum of all invested assets is {}.").format(suminvertido))
#            doc.simpleParagraph(_("Investment gains (positive minus negative results): {} - {} are {}, what represents a {} of total assets.").format(doc.mem.data.investments_active().pendiente_positivo(), doc.mem.data.investments_active().pendiente_negativo(), sumpendiente, Percentage(sumpendiente, suminvertido)))
#            doc.simpleParagraph(_(" Assets average age: {}").format(  days2string(doc.mem.data.investments_active().average_age())))
#        else:
#            doc.simpleParagraph(_("There aren't invested assets"))
#        doc.pageBreak(True)
#        
#        
#        ### Current Investment Operations list
#        doc.header(_("Current investment operations"), 2)
#        doc.mem.frmMain.on_actionInvestmentsOperations_triggered()
#        model=doc.mem.frmMain.w.mqtwCurrent.officegeneratorModel(_("CurrentInvestmentOperations"))
#        model.removeColumns([8, 9, 11])        
#        model.odt_table(self, 26,  6)       
#        doc.pageBreak(True)
#        
#        ### Graphics wdgInvestments clases
#        doc.mem.frmMain.on_actionInvestmentsClasses_triggered()
#        doc.mem.frmMain.w.open_all_tabs()#Load tabs to finish animations
#        doc.mem.frmMain.w.viewTPC.on_actionShowData_triggered()
#        doc.mem.frmMain.w.viewTipo.on_actionShowData_triggered()
#        doc.mem.frmMain.w.viewApalancado.on_actionShowData_triggered()
#        doc.mem.frmMain.w.viewProduct.on_actionShowData_triggered()
#        doc.mem.frmMain.w.viewCountry.on_actionShowData_triggered()
#        doc.mem.frmMain.w.viewPCI.on_actionShowData_triggered()
#        
#        doc.header(_("Investments group by variable percentage"), 2)
#        savefile="{}/wdgInvestmentsClasses_canvasTPC_legend.png".format(doc.dir)
#        doc.mem.frmMain.w.tab.setCurrentIndex(0)
#        doc.sleep(2)
#        doc.mem.frmMain.w.viewTPC.pie.save(savefile)
#        doc.addImage(savefile, savefile)
#        doc.illustration([savefile, ], 25, 13, savefile)
#        doc.pageBreak(True)
#        
#        doc.header(_("Investments group by investment type"), 2)
#        savefile="{}/wdgInvestmentsClasses_canvasTipo_legend.png".format(doc.dir)
#        doc.mem.frmMain.w.tab.setCurrentIndex(2)
#        doc.sleep(2)
#        doc.mem.frmMain.w.viewTipo.pie.save(savefile)
#        doc.addImage(savefile, savefile)
#        doc.illustration([savefile, ], 25, 13, savefile)
#        doc.pageBreak(True)
#        
#        doc.header(_("Investments group by leverage"), 2)        
#        savefile="{}/wdgInvestmentsClasses_canvasApalancado_legend.png".format(doc.dir)
#        doc.mem.frmMain.w.tab.setCurrentIndex(3)
#        doc.sleep(2)
#        doc.mem.frmMain.w.viewApalancado.pie.save(savefile)
#        doc.addImage(savefile, savefile)
#        doc.illustration([savefile, ], 25, 13, savefile)
#        doc.pageBreak(True)
#        
#        doc.header(_("Investments group by investment product"), 2)
#        savefile="{}/wdgInvestmentsClasses_canvasProduct_legend.png".format(doc.dir)
#        doc.mem.frmMain.w.tab.setCurrentIndex(5)
#        doc.sleep(2)
#        doc.mem.frmMain.w.viewProduct.pie.save(savefile)
#        doc.addImage(savefile, savefile)
#        doc.illustration([savefile, ], 25, 13, savefile)
#        doc.pageBreak(True)
#        
#        doc.header(_("Investments group by country"), 2)
#        savefile="{}/wdgInvestmentsClasses_canvasCountry_legend.png".format(doc.dir)
#        doc.mem.frmMain.w.tab.setCurrentIndex(4)
#        doc.sleep(2)
#        doc.mem.frmMain.w.viewCountry.pie.save(savefile)
#        doc.addImage(savefile, savefile)
#        doc.illustration([savefile, ], 25, 13, savefile)
#        doc.pageBreak(True)
#        
#        doc.header(_("Investments group by Call/Put/Inline"), 2)
#        savefile="{}/wdgInvestmentsClasses_canvasPCI_legend.png".format(doc.dir)
#        doc.mem.frmMain.w.tab.setCurrentIndex(1)
#        doc.sleep(2)
#        doc.mem.frmMain.w.viewPCI.pie.save(savefile)
#        doc.addImage(savefile, savefile)
#        doc.illustration([savefile, ], 25, 13, savefile)
#        
#        doc.mem.frmMain.showMaximized()
#        doc.pageBreak(True)
#        
#        #Orders report
#        doc.header(_("Investments orders"), 1)
#        doc.mem.frmMain.on_actionOrders_triggered()        
#        doc.simpleParagraph(_("These are the current investment orders that have been set in your banks"))
#        model=doc.mem.frmMain.w.mqtwOrders.officegeneratorModel("mqtwOrders")
#        model.odt_table(self, 26, 8)
#        doc.pageBreak(True)
#        
#        #Dividend report
#        doc.header(_("Dividend estimations report"), 1)
#        doc.mem.frmMain.on_actionDividendsReport_triggered()
#        model=doc.mem.frmMain.w.mqtw.officegeneratorModel("mqtwDividendsReport")
#        model.odt_table(self, 26, 8)
#        doc.simpleParagraph(_("If I keep this investment during a year, I'll get {0}").format(Assets(doc.mem).dividends_estimated()))
#        doc.pageBreak(True)
#        
#        # Ranking de investments
#        doc.header(_("Historical investments ranking"), 1)    
#        doc.mem.frmMain.on_actionInvestmentRanking_triggered()
#        model=doc.mem.frmMain.w.mqtwCurrentOperations.officegeneratorModel("mqtwCurrentOperations")
#        model.vh=list(range(1, len(model.data)+1))
#        model.odt_table(self, 26, 8)        
#
#    def sleep(self, seconds):
#        dieTime= QTime.currentTime().addSecs(seconds);
#        while (QTime.currentTime() < dieTime):
#            QCoreApplication.processEvents(QEventLoop.AllEvents, 100)
