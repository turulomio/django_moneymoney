# Generated by Django 5.0.2 on 2024-03-17 00:25

from django.db import migrations
from django.utils import timezone
from moneymoney import ios
from moneymoney.types import eOperationType, eConcept


def update_associated_account_operation(io, apps):
    
    Accountsoperations=apps.get_model('moneymoney', 'Accountsoperations')
    Concepts=apps.get_model('moneymoney', 'Concepts')
    if io.associated_ao is not None:
        io.associated_ao.delete()
    plio=ios.IOS.from_ids(timezone.now(), "EUR", [io.investments.id, ], 1)
    #Searches io investments operations of the comment
    io_in_plio=None
    for o in plio.d_io(io.investments.id):
        if o["id"]==io.id:
            io_in_plio=o
    
    if io.investments.daily_adjustment is True: #Because it uses adjustment information
        print("DAILY ADJUNTMENT")
        return
    
    if io.operationstypes.id==eOperationType.SharesPurchase:#Compra Acciones
        c=Accountsoperations()
        c.datetime=io.datetime
        c.concepts=Concepts.objects.get(pk=eConcept.BuyShares)
        c.amount=-io_in_plio['net_account']
        c.comment=""
        c.accounts=io.investments.accounts
        c.save()
        io.associated_ao=c
        io.save()
    elif io.operationstypes.id==eOperationType.SharesSale:#// Venta Acciones
        c=Accountsoperations()
        c.datetime=io.datetime
        c.concepts=Concepts.objects.get(pk=eConcept.SellShares)
        c.amount=io_in_plio['net_account']
        c.comment=""
        c.accounts=io.investments.accounts
        c.save()
        io.associated_ao=c
        io.save()
    elif io.operationstypes.id==eOperationType.SharesAdd:#Added
        if(io.commission!=0):
            c=Accountsoperations()
            c.datetime=io.datetime
            c.concepts=Concepts.objects.get(pk=eConcept.BankCommissions)
            c.amount=-io_in_plio['taxes_account']-io_in_plio['commission_account']
            c.comment=""
            c.accounts=io.investments.accounts
            c.save()
            io.associated_ao=c
            io.save()
        

def convert_old_io_associated_ao(apps, schema_editor):
    Accountsoperations=apps.get_model('moneymoney', 'Accountsoperations')
    Investmentsoperations=apps.get_model('moneymoney', 'Investmentsoperations')

    for old_ao in Accountsoperations.objects.filter(comment__startswith="10000,"):
        comment_id, io_id=old_ao.comment.split(",")
        
        #Checks all old_ao exists
        try:
            io=Investmentsoperations.objects.get(pk=int(io_id))
        except:
            print("Bad io",  io_id)
            continue
        update_associated_account_operation(io, apps)
        old_ao.delete()

class Migration(migrations.Migration):

    dependencies = [
        ("moneymoney", "0046_remove_accountsoperations_associated_io_and_more"),
    ]

    operations = [
    
        migrations.RunPython(convert_old_io_associated_ao), 
    
    ]
