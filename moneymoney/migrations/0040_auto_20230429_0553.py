# Generated by Django 4.2 on 2023-04-29 05:53

from django.db import migrations
from tqdm import tqdm
"""
    Esta migración pone los personal products que actualmente son positivos en id +10 000 000
    Los system products que actualmente son negativos los pone en positivos
"""

def new_products_id(old_id):
    if old_id>0:#personal products   positive
        return 10000000+old_id
    else:#system products negative
        return -old_id


def changin_products_id(apps, schema_editor):
    Products=apps.get_model('moneymoney', 'Products')
    EDPS=apps.get_model('moneymoney', 'EstimationsDPS')
    DPS=apps.get_model('moneymoney', 'DPS')
    Investments=apps.get_model('moneymoney', 'Investments')
    Productspairs=apps.get_model('moneymoney', 'Productspairs')
    Profile=apps.get_model('moneymoney', 'Profile')
    Quotes=apps.get_model('moneymoney', 'Quotes')
    Splits=apps.get_model('moneymoney', 'Splits')
    
    #Iterate all products
    for p in tqdm(Products.objects.all()):
        oldid=p.id
        #Create new product
        new_p=p
        new_p.id=new_products_id(oldid)
        new_p.save()
        
        old_p=Products.objects.get(pk=oldid)

        #Update products
        DPS.objects.filter(products=old_p).update(products=new_p)
        EDPS.objects.filter(products=old_p).update(products=new_p)
        Investments.objects.filter(products=old_p).update(products=new_p)
        Productspairs.objects.filter(a=old_p).update(a=new_p)
        Productspairs.objects.filter(b=old_p).update(b=new_p)
        Quotes.objects.filter(products=old_p).update(products=new_p)
        Splits.objects.filter(products=old_p).update(products=new_p)
        
        #Searches product in profile
        for profile in Profile.objects.all():
            if old_p in profile.favorites.all():
                profile.favorites.remove(old_p)
                profile.save()
                profile.favorites.add(new_p)
                profile.save()
        old_p.delete()

class Migration(migrations.Migration):

    dependencies = [
        ('moneymoney', '0039_fastoperationscoverage_investments'),
    ]

    operations = [
        migrations.RunPython(changin_products_id), 
        migrations.RunSQL("""
CREATE OR REPLACE FUNCTION public.currency_factor(at_datetime timestamp with time zone, currency_from text, currency_to text)
 RETURNS numeric
 LANGUAGE plpgsql
AS $function$
DECLARE
    factor NUMERIC;
BEGIN
    IF currency_from = currency_to THEN
        factor:=1;
    ELSIF currency_from = 'EUR' AND currency_to = 'USD' THEN
        select quote INTO factor from quote(74747, at_datetime);
    ELSIF currency_from = 'USD' AND currency_to = 'EUR' THEN
        select quote INTO factor from quote(74747, at_datetime);
        IF factor = 0 THEN
            factor:=NULL;
        ELSE
            factor:=1/factor;
        END IF;
    END IF;
    IF factor IS NULL THEN return NULL; ELSE return factor; END IF;
END;
$function$
""")

    
    
    ]
# Esta migración solo será ejecutada en instalaciones existentes, ya que los datos se cargan con loaddata_
#
