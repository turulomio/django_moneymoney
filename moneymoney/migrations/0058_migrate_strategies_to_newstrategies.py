# Generated by Django 5.2.1 on 2025-05-27 07:45

from django.db import migrations
def migrate(apps, schema_editor):
    OldStrategies=apps.get_model('moneymoney', 'Strategies')
    NewStrategies=apps.get_model('moneymoney', 'NewStrategies')
    StrategiesPairsInSameAccount=apps.get_model('moneymoney', 'StrategiesPairsInSameAccount')
    StrategiesProductsRange=apps.get_model('moneymoney', 'StrategiesProductsRange')
    StrategiesGeneric=apps.get_model('moneymoney', 'StrategiesGeneric')
    StrategiesFastOperations=apps.get_model('moneymoney', 'StrategiesFastOperations')
    Products=apps.get_model('moneymoney', 'Products')
    Accounts=apps.get_model('moneymoney', 'Accounts')

    for old_strategy in OldStrategies.objects.all():
        new_strategy=NewStrategies()
        new_strategy.name=old_strategy.name
        new_strategy.dt_from=old_strategy.dt_from
        new_strategy.dt_to=old_strategy.dt_to
        new_strategy.type=old_strategy.type
        new_strategy.comment=old_strategy.comment
        new_strategy.save()

        ##Corrections
        if new_strategy.type==1 and (old_strategy.additional1 is None or old_strategy.additional2 is None):
            new_strategy.type=3
            new_strategy.save()

        if new_strategy.type not in [1,2,3,4]:
            new_strategy.type=3
            new_strategy.save()


        if new_strategy.type==1:# Pairs en same account
            s=StrategiesPairsInSameAccount()
            s.strategy=new_strategy
            s.worse_product=Products.objects.get(pk=old_strategy.additional1)
            s.better_product=Products.objects.get(pk=old_strategy.additional2)
            s.account=Accounts.objects.get(pk=old_strategy.additional3)
            s.save()
        elif new_strategy.type==2: #Product ranges
            s=StrategiesProductsRange()
            s.strategy=new_strategy
            s.product=Products.objects.get(pk=old_strategy.additional1)
            for old_investment in old_strategy.investments.all():
                s.investments.add(old_investment)
            s.percentage_between_ranges=old_strategy.additional2/1000
            s.percentage_gains=old_strategy.additional3/1000
            s.amount=old_strategy.additional4/1000
            s.recomendation_method=old_strategy.additional5
            s.only_first=bool(old_strategy.additional6)
            s.save()
        elif new_strategy.type==3: #Generic
            s=StrategiesGeneric()
            s.strategy=new_strategy
            for old_investment in old_strategy.investments.all():
                s.investments.add(old_investment)
            s.save()
        elif new_strategy.type==4: #FastOperations
            s=StrategiesFastOperations()
            s.strategy=new_strategy
            for old_account in old_strategy.accounts.all():
                s.accounts.add(old_account)
            s.save()

class Migration(migrations.Migration):

    dependencies = [
        ("moneymoney", "0057_newstrategies_strategiesfastoperations_and_more"),
    ]

    operations = [
        migrations.RunPython(migrate)
    ]


